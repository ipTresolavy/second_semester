-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DIG_D_FF is
  generic (
    Default: std_logic ); 
  port ( D  : in std_logic;
         C  : in std_logic;
         Q  : out std_logic;
         notQ : out std_logic );
end DIG_D_FF;

architecture Behavioral of DIG_D_FF is
   signal state : std_logic := Default;
begin
   Q    <= state;
   notQ <= NOT( state );

   process(C)
   begin
      if rising_edge(C) then
        state  <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    clk: in std_logic;
    x: in std_logic;
    z: out std_logic);
end main;

architecture Behavioral of main is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
  signal s8: std_logic;
  signal s9: std_logic;
begin
  s0 <= (((s2 AND s5 AND s7) OR NOT (s7 XOR s4)) AND x);
  s3 <= ((s9 OR s1) AND x);
  s6 <= (s9 AND NOT x);
  gate0: entity work.DIG_D_FF -- D0
    generic map (
      Default => '0')
    port map (
      D => s0,
      C => clk,
      Q => s1,
      notQ => s2);
  gate1: entity work.DIG_D_FF -- D1
    generic map (
      Default => '0')
    port map (
      D => s3,
      C => clk,
      Q => s4,
      notQ => s5);
  gate2: entity work.DIG_D_FF -- D2
    generic map (
      Default => '0')
    port map (
      D => s6,
      C => clk,
      Q => s7,
      notQ => s8);
  s9 <= (s2 AND s4 AND s8);
  z <= (s2 AND s5 AND s7);
end Behavioral;
